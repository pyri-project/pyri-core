def test_bool():
    a = bool("a string")
    b = bool("")
    c = bool(1)
    d = bool(0)

    assert a == True
    assert b == False
    assert c
    assert not d

    assert True or False
    assert not (True and False)
    assert True and (True or False)

def test_int():
    a = int(10)
    b = 10 + 20
    assert b == 30
    assert b > 20
    assert b <= 30

    c = int(20.2)
    assert c == 20

    d = int ("101")
    assert d == 101

def test_float():
    a = int(10.1)
    b = 10.1 + 20.4
    assert b == 30.5
    assert b > 20.63
    assert b <= 30.5

    c = float(20.2)
    assert c == 20.2

    d = float ("101.1121")
    assert d == 101.1121

def test_complex():
    a = complex(10.1+6.7j)
    b = 10.1+3.2j + 20.4+6j
    assert b == 30.5+9.2j
    
    d = complex("101.1121+6j")
    assert d == 101.1121 + 6j

def test_str():
    a = "Hello world!"
    assert a == 'Hello world!'
    assert len(a) == 12

    #Make sure function attributes work
    assert a.strip('!') == 'Hello world'
    assert a.upper() == "HELLO WORLD!"

    #Check slicing
    assert a[0:5] == "Hello"
    assert a.upper()[6:] == "WORLD!"

def test_bytearray():
    a = bytearray([10, 87, 44, 97, 67, 86, 67, 23])
    assert a == b'\nW,aCVC\x17'
    assert a[6:8] == (b'\nW,aCVC\x17')[6:8]

    assert a.replace(b"a",b"b") == (b'\nW,bCVC\x17')

    assert bytearray.fromhex('f0 f1f2  ') == b'\xf0\xf1\xf2'

def test_list():
    a = list([1,2,3,4])
    assert a == [1,2,3,4]
    assert len(a) == 4
    a.append(5)
    assert a == [1,2,3,4,5]

    assert max(a) == 5

    del a[2]
    assert a == [1,2,4,5]

    a.extend([6,7])
    a[0] = 10
    assert a == [10,2,4,5,6,7]
    a[1:3] = [22,22]
    assert a == [10,22,22,5,6,7]

    assert str(a) == '[10, 22, 22, 5, 6, 7]'

def test_set():
    a = set([1,2,3,3])
    assert a == set([1,2,3])
    assert a == frozenset([1,2,3,3])

    a.add(4)
    a.remove(2)

    assert a == frozenset([1,4,3])

def test_dict():
    a = {'a': 1, 'b': 2, 'c': 3}
    assert len(a) == 3
    assert a['b'] == 2

    a['d'] = 4
    assert len(a) == 4
    assert a['d'] == 4

    b = []
    for k,v in a.items():
        b.append(k)

    assert b == ['a', 'b', 'c', 'd']
    assert a.get('c') == 3

def test_tuple():
    a = tuple([1,2,3])
    assert a == (1,2,3)

    assert (1,2,3,4,3,8,3).count(3) == 3
